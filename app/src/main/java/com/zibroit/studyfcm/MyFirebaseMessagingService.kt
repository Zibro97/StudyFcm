package com.zibroit.studyfcm

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.PendingIntent.FLAG_UPDATE_CURRENT
import android.content.Context
import android.content.Intent
import android.os.Build
import android.widget.RemoteViews
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage


class MyFirebaseMessagingService : FirebaseMessagingService() {

    /*ÌÜ†ÌÅ∞Ïù¥ Í∞±Ïã† Îê†Îïå ÎßàÎã§ ÌÜ†ÌÅ∞ Î∞òÌôò*/
    override fun onNewToken(p0: String) {
        super.onNewToken(p0)
    }

    override fun onMessageReceived(remotemessage: RemoteMessage) {
        super.onMessageReceived(remotemessage)

        createNotificationChannel()

        val type = remotemessage.data["type"]
            ?.let{ NotificationType.valueOf(it) }
        val title = remotemessage.data["title"]
        val message = remotemessage.data["message"]
        type ?: return

        NotificationManagerCompat.from(this)
            .notify(type.id,createNotification(type,title,message))
    }

    private fun createNotificationChannel(){
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){
            val channel = NotificationChannel(CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_DEFAULT
            )
            channel.description = CHANNEL_DESCRIPTION

            (getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager)
                .createNotificationChannel(channel)
        }
    }

    private fun createNotification(type: NotificationType,title:String?, message:String?): Notification {
        val intent = Intent(this,MainActivity::class.java).apply {
            putExtra("notificationType","${type.title} ÌÉÄÏûÖ")
            addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
        }
        /*pendingIntent : Ïù∏ÌÖêÌä∏Î•º Í∞ÄÏßÄÍ≥† ÏûàÎäî ÌÅ¥ÎûòÏä§Î°ú, Í∏∞Î≥∏ Î™©Ï†ÅÏùÄ Îã§Î•∏ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùò Í∂åÌïúÏùÑ ÌóàÍ∞ÄÌï¥ Í∞ñÍ≥†ÏûàÎäî IntentÎ•º ÎßàÏπò Î≥∏Ïù∏ Ïï±Ïùò ÌîÑÎ°úÏÑ∏Ïä§ÏóêÏÑú Ïã§ÌñâÌïòÎäî Í≤ÉÏ≤òÎüº ÏÇ¨Ïö©ÌïòÍ≤å ÌïòÎäî Í≤É*/
        val pendingIntent = PendingIntent.getActivity(this,type.id,intent,FLAG_UPDATE_CURRENT)

        val notificationBuilder =  NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(R.drawable.notification_icon)
            .setContentTitle(title)
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
        when(type){
            /*Í∏∞Î≥∏Ìòï*/
            NotificationType.NORMAL -> Unit
            /*ÌôïÏû•Ìòï*/
            NotificationType.EXPANDABLE -> {
                notificationBuilder.setStyle(
                    NotificationCompat.BigTextStyle()
                        .bigText("üòÄ üòÉ üòÑ üòÅ üòÜ üòÖ üòÇ ü§£ ü•≤ ‚ò∫Ô∏è üòä üòá " +
                                "üôÇ üôÉ üòâ üòå üòç ü•∞ üòò üòó üòô üòö üòã üòõ " +
                                "üòù üòú ü§™ ü§® üßê ü§ì üòé ü•∏ ü§© ü•≥ üòè üòí " +
                                "üòû üòî üòü üòï üôÅ ‚òπÔ∏è üò£ üòñ üò´ üò© ü•∫ üò¢ " +
                                "üò≠ üò§ üò† üò° ü§¨ ü§Ø üò≥ ü•µ ü•∂ üò± üò® üò∞ " +
                                "üò• üòì ü§ó ü§î ü§≠ ü§´ ü§• üò∂ üòê üòë üò¨ üôÑ " +
                                "üòØ üò¶ üòß üòÆ üò≤ ü•± üò¥ ü§§ üò™ üòµ ü§ê ü•¥ " +
                                "ü§¢ ü§Æ ü§ß üò∑ ü§í ü§ï")
                )
            }
            /*Ïª§Ïä§ÌÖÄ*/
            NotificationType.CUSTOM -> {
                notificationBuilder
                    .setStyle(NotificationCompat.DecoratedCustomViewStyle())
                    .setCustomContentView(
                        RemoteViews(packageName, R.layout.view_custom_notification)
                            .apply {
                                setTextViewText(R.id.title,title)
                                setTextViewText(R.id.message,message)
                            })
            }
        }
        return notificationBuilder.build()
    }

    companion object{
        private const val CHANNEL_NAME = "Emoji Party"
        private const val CHANNEL_DESCRIPTION = " Emoji PartyÎ•º ÏúÑÌïú Ï±ÑÎÑê"
        private const val CHANNEL_ID = "Channel Id"
    }
}